@page "/agents"
@using MinimalApi.Models
@using ClientApp.Components

@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Available Agents</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (_agents == null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudTable Items="@FilteredAgents" Hover="true" Dense="true" Striped="true" Class="mt-4">
            <ToolBarContent>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add" 
                           OnClick="OpenCreateAgentDialog" 
                           Class="mr-2">
                    New Agent
                </MudButton>
                <MudButton Variant="Variant.Text" 
                           StartIcon="@Icons.Material.Filled.Refresh" 
                           OnClick="RefreshAgents" 
                           Class="mr-2">
                    Refresh
                </MudButton>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" 
                              Placeholder="Search" 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search" 
                              IconSize="Size.Medium" 
                              Class="mt-0 mr-2">
                </MudTextField>
                <MudButton Variant="Variant.Text" 
                           StartIcon="@Icons.Material.Filled.FilterList">
                    Filter
                </MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>ID</MudTh>
                <MudTh>Created</MudTh>
                <MudTh>Model</MudTh>
                <MudTh>Tools</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Created">@context.CreatedAt.ToString("MMM dd, yyyy")</MudTd>
                <MudTd DataLabel="Model">@context.Model</MudTd>
                <MudTd DataLabel="Tools">@GetTools(context)</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                   Color="Color.Primary" 
                                   Size="Size.Small" 
                                   OnClick="@(() => OpenEditAgentDialog(context))"
                                   Title="Edit agent" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                   Color="Color.Error" 
                                   Size="Size.Small" 
                                   OnClick="@(() => DeleteAgentsByName(context.Name))"
                                   Title="Delete all agents with this name" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private AgentViewModel[]? _agents;
    private string _searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
    }

    private async Task LoadAgents()
    {
        _agents = await Http.GetFromJsonAsync<AgentViewModel[]>("api/agents");
    }

    private async Task RefreshAgents()
    {
        _agents = null; // Show loading indicator
        await LoadAgents();
        StateHasChanged();
    }

    private async Task OpenCreateAgentDialog()
    {
        var dialog = DialogService.Show<CreateAgentDialog>("Create New Agent");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is AgentViewModel newAgent)
        {
            var response = await Http.PostAsJsonAsync("api/agent", newAgent);
            if (response.IsSuccessStatusCode)
            {
                await LoadAgents();
                StateHasChanged();
            }
            else
            {
                // Handle error, e.g., show a notification
                Snackbar.Add("Failed to create agent", Severity.Error);
            }
        }
    }

    private async Task DeleteAgentsByName(string agentName)
    {
        var parameters = new DialogParameters<DeleteAgentConfirmationDialog>
        {
            { x => x.AgentName, agentName }
        };

        var dialog = DialogService.Show<DeleteAgentConfirmationDialog>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/agents/{Uri.EscapeDataString(agentName)}");
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var deleteResult = System.Text.Json.JsonSerializer.Deserialize<DeleteAgentResponse>(responseContent, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (deleteResult?.DeletedCount > 0)
                    {
                        Snackbar.Add($"Successfully deleted {deleteResult.DeletedCount} agent(s) with name '{agentName}'", Severity.Success);
                        await LoadAgents();
                        StateHasChanged();
                    }
                    else
                    {
                        Snackbar.Add($"No agents found with name '{agentName}'", Severity.Info);
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Failed to delete agents: {errorContent}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting agents: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenEditAgentDialog(AgentViewModel agent)
    {
        var parameters = new DialogParameters<EditAgentDialog>
        {
            { x => x.Agent, agent }
        };

        var dialog = DialogService.Show<EditAgentDialog>("Edit Agent", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is AgentViewModel updatedAgent)
        {
            try
            {
                var response = await Http.PutAsJsonAsync($"api/agent/{Uri.EscapeDataString(agent.Id)}", updatedAgent);
                if (response.IsSuccessStatusCode)
                {
                    await LoadAgents();
                    StateHasChanged();
                    Snackbar.Add("Agent updated successfully", Severity.Success);
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Failed to update agent: {errorContent}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating agent: {ex.Message}", Severity.Error);
            }
        }
    }

    private IEnumerable<AgentViewModel> FilteredAgents
    {
        get
        {
            if (_agents == null) return Enumerable.Empty<AgentViewModel>();
            if (string.IsNullOrWhiteSpace(_searchString))
                return _agents;
            return _agents.Where(a =>
                (a.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Id?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }
    }

    private string GetTools(AgentViewModel agent)
    {
        if (agent.Name.Contains("demo")) return "code_interpreter";
        return string.Empty;
    }

    private class DeleteAgentResponse
    {
        public int DeletedCount { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}
